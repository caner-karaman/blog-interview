/* eslint-disable @next/next/google-font-display */
/* eslint-disable @next/next/no-page-custom-font */
import React from 'react';
import type { NextPage } from 'next';
import { gql } from 'graphql-tag';
import { useQuery } from '@apollo/client';
import Head from 'next/head';
import Header from "../components/header/Header";
import Sidebar from '../components/sidebar/Sidebar';
import BlogItem from '../components/blogItem/BlogItem';
import { ItemWrapper, StyledContainer, Main, Articles, FilterWrapper } from '../styles/App.styles';
import { useRouter } from 'next/router';
import Pagination from '../components/pagination/Pagination';
import Sorting from '../components/sort/Sorting';
import ContentLoader from 'react-content-loader';
import useWindowDimensions from '../common/useWindowDimension';

const ALL_POSTS_QUERY = gql`
  query ALL_POSTS_QUERY($page: Int!, $sort: SortOrderEnum) {
    posts(options: {
    paginate: {
      page: $page
      limit: 4
    }
    sort: {
      order: $sort
      field: "title"
    }
  }) {
    data {
      id
      title
      body
      comments {
        data {
          id
          body
          name
        }
      }
    }
    meta {
      totalCount
    }
  }
  }
`;

const SINGLE_USER_QUERY = gql`
  query SINGLE_USER_QUERY($id: ID!, $page: Int!, $sort: SortOrderEnum) {
    user(id: $id) {
        name
        username
        email
        id
        posts(options: {
          paginate: {
            page: $page
            limit: 4
          }
          sort: {
            order: $sort
            field: "title"
          }
        }) {
          data {
            title
            id
            body
            comments {
              data {
                body 
                name
                id
              }
            }
          }
          meta {
            totalCount
          }
        }
    }
  }
`;

const Home: NextPage = () => {
  const { query } = useRouter();
  const id = query?.user;
  const page = query?.page as string || '1';
  const Query = id ? SINGLE_USER_QUERY : ALL_POSTS_QUERY;
  const { width } = useWindowDimensions();
  const QUERY_OPTIONS = {
    variables: {
      id,
      page: +page,
      sort: query?.sort,
    }
  }
  const { data, error, loading } = useQuery<{posts?: AllPostsResponse} & {user?: UserResponse}>(Query, QUERY_OPTIONS);
  const pageCount = Math.ceil(data?.user?.posts?.meta?.totalCount ? data?.user?.posts?.meta?.totalCount/4 : data?.posts?.meta?.totalCount ? data?.posts?.meta?.totalCount/4 : 1 );
  const controlledWidth = width || 0;
  const loaderWidth = controlledWidth > 1025 ? 320 : '100%';

  if(error) return <p>{`error: ${error}`}</p>

  return (
    <div>
      <Head>
        <title>Viable Ventures</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto" />
      </Head>
      <Header></Header>
      <StyledContainer>
        <Sidebar />
        <Main>
          <FilterWrapper>
          {loading ? (<ContentLoader
                    speed={2}
                    width={220}
                    height={40}
                    backgroundColor="#d9d9d9"
                    foregroundColor="#ededed"
                  >
                    <rect x="0" y="6" rx="4" ry="4" width="220" height="40" />
                  </ContentLoader>)  : <Pagination pageCount={pageCount} page={page}></Pagination>}
            <Sorting />
          </FilterWrapper>
          <Articles>
            {loading ? (
              <>
                <ItemWrapper>
                  <ContentLoader
                    speed={2}
                    width={loaderWidth}
                    height={200}
                    backgroundColor="#d9d9d9"
                    foregroundColor="#ededed"
                  >
                    <rect x="0" y="6" rx="4" ry="4" width="100%" height="200" />
                  </ContentLoader>
                </ItemWrapper>
                <ItemWrapper>
                  <ContentLoader
                    speed={2}
                    width={loaderWidth}
                    height={200}
                    backgroundColor="#d9d9d9"
                    foregroundColor="#ededed"
                  >
                    <rect x="0" y="6" rx="4" ry="4" width="100%" height="200" />
                  </ContentLoader>
                </ItemWrapper>
              </>
            ) : (
              <>
                {data?.posts?.data ? data?.posts?.data?.map((post) => (
                  <ItemWrapper key={post.id}>
                    <BlogItem username={post?.user?.name || ''} post={post} />
                  </ItemWrapper>
                )) : data?.user?.posts.data.map((post) => (
                  <ItemWrapper key={post.id}>
                    <BlogItem username={data?.user?.name ? data?.user?.name : ''} post={post} />
                  </ItemWrapper>
                ))}  
              </>
            )}
          </Articles>
        </Main>
      </StyledContainer>
    </div>
  )
}

export default Home
